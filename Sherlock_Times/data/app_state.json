import os
import json
from datetime import datetime
from typing import Dict, List, Any, Tuple

import streamlit as st
import pandas as pd
import altair as alt
import feedparser
import requests
from bs4 import BeautifulSoup
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

# ---------------------------
# App Config
# ---------------------------
st.set_page_config(page_title="Sherlock Times", page_icon="🕵️", layout="wide")

APP_TITLE = "🕵️ Sherlock Times – Company & Person News Dashboard"
DATA_PATH = os.path.join("data", "app_state.json")

# Hardcoded single admin password:
# Prefer: set env var ADMIN_PASSWORD on Streamlit Cloud
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD", "sherlock-admin-123")

# (Optional) Finance via yfinance (fallback to placeholder if not installed)
try:
    import yfinance as yf  # noqa
    HAS_YFIN = True
except Exception:
    HAS_YFIN = False

analyzer = SentimentIntensityAnalyzer()


# ---------------------------
# Storage
# ---------------------------
DEFAULT_STATE = {
    "companies": [
        # Example entry structure (editable in Admin)
        # {
        #   "name": "Google",
        #   "location": "IN",           # IN/US/Global
        #   "ticker": "GOOGL",          # optional for finance
        #   "careers_url": "https://careers.google.com/",  # optional
        #   "website": "https://about.google/",
        #   "competitors": ["Microsoft", "Amazon"]
        # }
    ],
    "persons": [
        # { "name": "Sundar Pichai", "company": "Google" }
    ]
}


def load_state() -> Dict[str, Any]:
    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)
    if not os.path.exists(DATA_PATH):
        save_state(DEFAULT_STATE)
        return json.loads(json.dumps(DEFAULT_STATE))
    with open(DATA_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


def save_state(state: Dict[str, Any]) -> None:
    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)
    with open(DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(state, f, indent=2, ensure_ascii=False)


# ---------------------------
# Utilities
# ---------------------------
def google_news_rss(query: str, region: str = "Global", max_results: int = 12) -> List[Dict[str, Any]]:
    """Get news via Google News RSS. Region tweaks language/geo (best-effort)."""
    q = requests.utils.quote(query)
    if region == "IN":
        hl, gl, ceid = "en-IN", "IN", "IN:en"
    elif region == "US":
        hl, gl, ceid = "en-US", "US", "US:en"
    else:
        hl, gl, ceid = "en", "US", "US:en"

    url = f"https://news.google.com/rss/search?q={q}&hl={hl}&gl={gl}&ceid={ceid}"
    feed = feedparser.parse(url)
    items = []
    for e in feed.entries[:max_results]:
        items.append({
            "title": e.title,
            "link": e.link,
            "published": getattr(e, "published", ""),
            "source": getattr(e, "source", {}).get("title", ""),
            "summary": BeautifulSoup(getattr(e, "summary", ""), "html.parser").get_text()
        })
    return items


def sentiment(text: str) -> Tuple[str, float]:
    s = analyzer.polarity_scores(text or "")
    c = s["compound"]
    if c >= 0.05:
        return "Positive", c
    if c <= -0.05:
        return "Negative", c
    return "Neutral", c


def badge_for_sentiment(label: str) -> str:
    colors = {"Positive": "#22c55e", "Neutral": "#64748b", "Negative": "#ef4444"}
    return f'<span style="background:{colors[label]};color:white;padding:2px 8px;border-radius:999px;font-size:12px;">{label}</span>'


def careers_top_areas(careers_url: str) -> List[str]:
    """Very light-weight best-effort: fetch page and extract frequent keywords."""
    if not careers_url:
        return []
    try:
        r = requests.get(careers_url, timeout=6, headers={"User-Agent": "Mozilla/5.0"})
        if r.status_code != 200:
            return []
        soup = BeautifulSoup(r.text, "html.parser")
        text = soup.get_text(separator=" ").lower()

        # Simple keyword buckets (extend as needed)
        buckets = {
            "AI/ML": ["machine learning", "ml", "ai", "llm", "deep learning"],
            "Data": ["data engineer", "data scientist", "analytics", "data analyst", "etl"],
            "Cloud/DevOps": ["devops", "kubernetes", "docker", "aws", "gcp", "azure", "cloud"],
            "Security": ["security", "infosec", "soc", "siem", "threat", "zero trust"],
            "Frontend": ["react", "angular", "vue", "javascript", "frontend"],
            "Backend": ["java", "python", "go ", "golang", "node", "microservices", "spring"],
            "Mobile": ["android", "ios", "swift", "kotlin", "react native"],
            "Sales/AM": ["sales", "account manager", "customer success", "pre-sales"],
            "Finance/Ops": ["finance", "fp&a", "operations", "supply chain", "logistics"],
            "Support": ["support engineer", "technical support", "helpdesk"],
        }
        scores = {k: 0 for k in buckets}
        for k, kws in buckets.items():
            for kw in kws:
                scores[k] += text.count(kw)

        top5 = [k for k, _ in sorted(scores.items(), key=lambda x: x[1], reverse=True) if _ > 0][:5]
        return top5
    except Exception:
        return []


def finance_quarterly_summary(ticker: str) -> Dict[str, Any]:
    """Optional yfinance quick snapshot. Returns {} if unavailable."""
    if not ticker or not HAS_YFIN:
        return {}
    try:
        t = yf.Ticker(ticker)
        qfin = t.quarterly_financials  # DataFrame
        # Try to infer revenue change QoQ if data present
        result = {"ticker": ticker}
        if qfin is not None and not qfin.empty and "Total Revenue" in qfin.index:
            rev = qfin.loc["Total Revenue"].dropna()
            result["revenues"] = [int(r) for r in rev.values.tolist()]
            if len(rev) >= 2:
                latest = rev.iloc[0]
                prev = rev.iloc[1]
                growth = (latest - prev) / prev * 100 if prev != 0 else None
                result["qoq_growth_pct"] = round(float(growth), 2) if growth is not None else None
        return result
    except Exception:
        return {}


def render_tiles(items: List[Dict[str, Any]], cols: int = 3):
    """Render a responsive grid of tiles."""
    if not items:
        st.info("No items found.")
        return
    # chunk
    for i in range(0, len(items), cols):
        row = st.columns(cols)
        for j, card in enumerate(items[i:i + cols]):
            with row[j]:
                title = card.get("title", "Untitled")
                summ = (card.get("summary") or "").strip()
                sent, score = sentiment(f"{title}. {summ}")
                st.markdown(
                    f"""
<div style="border:1px solid #e5e7eb;border-radius:12px;padding:14px;height:100%;">
  <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
    <div style="font-weight:600;font-size:15px;line-height:1.3;">{title}</div>
    <div>{badge_for_sentiment(sent)}</div>
  </div>
  <div style="color:#475569;font-size:13px;min-height:52px;">{summ[:220] + ('…' if len(summ)>220 else '')}</div>
  <div style="margin-top:10px;font-size:12px;color:#64748b;">
    {card.get('published','')}
  </div>
  <div style="margin-top:8px;">
    <a href="{card.get('link','#')}" target="_blank" style="text-decoration:none;background:#0ea5e9;color:white;padding:6px 10px;border-radius:8px;font-size:12px;">Open</a>
  </div>
</div>
                    """,
                    unsafe_allow_html=True,
                )


# ---------------------------
# Session & State
# ---------------------------
if "state" not in st.session_state:
    st.session_state.state = load_state()

if "is_admin" not in st.session_state:
    st.session_state.is_admin = False


def refresh_state():
    st.session_state.state = load_state()


# ---------------------------
# Header + Controls
# ---------------------------
st.title(APP_TITLE)

top_l, top_r = st.columns([2, 1])
with top_l:
    tz_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.caption(f"⏱ Last Fetched: {tz_now}")
with top_r:
    if not st.session_state.is_admin:
        if st.button("🔐 Admin Login"):
            with st.popover("Admin Login", use_container_width=True):
                pw = st.text_input("Password", type="password")
                if st.button("Login"):
                    if pw == ADMIN_PASSWORD:
                        st.session_state.is_admin = True
                        st.success("Logged in as Admin.")
                    else:
                        st.error("Invalid password.")
    else:
        c1, c2 = st.columns(2)
        with c1:
            st.success("You are in Admin mode.")
        with c2:
            if st.button("🚪 Logout"):
                st.session_state.is_admin = False

st.markdown("---")


# ---------------------------
# Tabs: Persons / Companies
# ---------------------------
tab_persons, tab_companies = st.tabs(["🧑 Persons", "🏢 Companies"])


# ===========================
# PERSONS TAB
# ===========================
with tab_persons:
    persons = st.session_state.state.get("persons", [])
    companies = st.session_state.state.get("companies", [])

    # Admin CRUD for persons
    if st.session_state.is_admin:
        with st.expander("⚙️ Admin: Manage Persons", expanded=False):
            # Add
            st.subheader("Add Person")
            p_name = st.text_input("Person Name")
            p_company = st.selectbox("Linked Company (optional)", [""] + [c["name"] for c in companies])
            if st.button("Add Person"):
                if p_name.strip():
                    persons.append({"name": p_name.strip(), "company": p_company.strip() or ""})
                    st.session_state.state["persons"] = persons
                    save_state(st.session_state.state)
                    st.success("Person added.")
            st.divider()
            # Update/Delete
            if persons:
                st.subheader("Edit / Delete Person")
                p_sel = st.selectbox("Select", [p["name"] for p in persons])
                idx = next((i for i, x in enumerate(persons) if x["name"] == p_sel), -1)
                if idx >= 0:
                    colA, colB, colC = st.columns([2, 2, 1])
                    with colA:
                        new_name = st.text_input("Name", value=persons[idx]["name"])
                    with colB:
                        new_comp = st.selectbox("Linked Company", [""] + [c["name"] for c in companies],
                                                index=([""] + [c["name"] for c in companies]).index(persons[idx].get("company", "")))
                    with colC:
                        if st.button("Delete", type="secondary"):
                            persons.pop(idx)
                            st.session_state.state["persons"] = persons
                            save_state(st.session_state.state)
                            st.warning("Deleted.")
                            st.stop()
                    if st.button("Save Changes"):
                        persons[idx]["name"] = new_name.strip()
                        persons[idx]["company"] = new_comp.strip()
                        st.session_state.state["persons"] = persons
                        save_state(st.session_state.state)
                        st.success("Updated.")

    st.subheader("Latest News about People")
    # Tiles: Person news
    person_news = []
    for p in persons:
        person_news += google_news_rss(p["name"], region="Global", max_results=6)
        # Person + Company combo if linked
        if p.get("company"):
            person_news += google_news_rss(f'{p["name"]} {p["company"]}', region="Global", max_results=6)
    render_tiles(person_news, cols=3)


# ===========================
# COMPANIES TAB
# ===========================
with tab_companies:
    companies = st.session_state.state.get("companies", [])

    # Admin CRUD for companies
    if st.session_state.is_admin:
        with st.expander("⚙️ Admin: Manage Companies", expanded=False):
            st.subheader("Add Company")
            name = st.text_input("Company Name")
            loc = st.selectbox("Location", ["Global", "IN", "US"], index=0)
            ticker = st.text_input("Ticker (optional, for finance)")
            website = st.text_input("Website (optional)")
            careers_url = st.text_input("Careers URL (optional)")
            comp_competitors = st.text_input("Competitors (comma-separated, optional)")
            if st.button("Add Company"):
                if name.strip():
                    companies.append({
                        "name": name.strip(),
                        "location": loc,
                        "ticker": ticker.strip(),
                        "website": website.strip(),
                        "careers_url": careers_url.strip(),
                        "competitors": [x.strip() for x in comp_competitors.split(",")] if comp_competitors.strip() else []
                    })
                    st.session_state.state["companies"] = companies
                    save_state(st.session_state.state)
                    st.success("Company added.")
            st.divider()

            if companies:
                st.subheader("Edit / Delete Company")
                selected = st.selectbox("Select", [c["name"] for c in companies])
                idx = next((i for i, x in enumerate(companies) if x["name"] == selected), -1)
                if idx >= 0:
                    cA, cB = st.columns([2, 2])
                    with cA:
                        e_name = st.text_input("Name", value=companies[idx]["name"])
                        e_loc = st.selectbox("Location", ["Global", "IN", "US"],
                                             index=["Global", "IN", "US"].index(companies[idx].get("location", "Global")))
                        e_ticker = st.text_input("Ticker", value=companies[idx].get("ticker", ""))
                    with cB:
                        e_site = st.text_input("Website", value=companies[idx].get("website", ""))
                        e_careers = st.text_input("Careers URL", value=companies[idx].get("careers_url", ""))
                        e_comp = st.text_input("Competitors (comma-separated)",
                                               value=", ".join(companies[idx].get("competitors", [])))
                    c1, c2, c3 = st.columns([1, 1, 1])
                    with c1:
                        if st.button("Save Company"):
                            companies[idx].update({
                                "name": e_name.strip(),
                                "location": e_loc,
                                "ticker": e_ticker.strip(),
                                "website": e_site.strip(),
                                "careers_url": e_careers.strip(),
                                "competitors": [x.strip() for x in e_comp.split(",")] if e_comp.strip() else []
                            })
                            st.session_state.state["companies"] = companies
                            save_state(st.session_state.state)
                            st.success("Updated.")
                    with c2:
                        if st.button("Delete Company", type="secondary"):
                            companies.pop(idx)
                            st.session_state.state["companies"] = companies
                            save_state(st.session_state.state)
                            st.warning("Deleted.")
                            st.stop()
                    with c3:
                        if st.button("Refresh Data"):
                            st.experimental_rerun()

    # -------- Sections --------
    st.subheader("Global News (All Companies)")
    all_news = []
    for c in companies:
        all_news += google_news_rss(c["name"], region=c.get("location", "Global"), max_results=6)
    render_tiles(all_news, cols=3)

    st.markdown("### Careers — Top 5 Hiring Areas")
    careers_cards = []
    for c in companies:
        top5 = careers_top_areas(c.get("careers_url", "")) if c.get("careers_url") else []
        title = f'{c["name"]} — Careers Focus'
        summary = ", ".join(top5) if top5 else "No extractable areas found / URL not provided."
        careers_cards.append({
            "title": title,
            "summary": summary,
            "published": "",
            "link": c.get("careers_url", "#")
        })
    render_tiles(careers_cards, cols=3)

    st.markdown("### Financial Updates")
    fin_cards = []
    for c in companies:
        fin = finance_quarterly_summary(c.get("ticker", ""))
        if fin:
            revs = fin.get("revenues", [])
            growth = fin.get("qoq_growth_pct", None)
            summary = f"Ticker {fin['ticker']}. " \
                      f"{'QoQ Growth: ' + str(growth) + '%' if growth is not None else 'Growth N/A'}. " \
                      f"{'Revenues: ' + ', '.join([str(r) for r in revs]) if revs else ''}"
        else:
            summary = "Finance data not available."
        fin_cards.append({
            "title": f'{c["name"]} — Financial Snapshot',
            "summary": summary,
            "published": "",
            "link": f"https://finance.yahoo.com/quote/{c.get('ticker','')}" if c.get("ticker") else c.get("website", "#")
        })
    render_tiles(fin_cards, cols=3)

    st.markdown("### Product Releases (Keyword-based)")
    product_cards = []
    for c in companies:
        product_cards += google_news_rss(f'{c["name"]} new product release', region=c.get("location", "Global"), max_results=4)
        product_cards += google_news_rss(f'{c["name"]} launches', region=c.get("location", "Global"), max_results=4)
    render_tiles(product_cards, cols=3)

    st.markdown("### Competition News")
    comp_cards = []
    for c in companies:
        comps = c.get("competitors", [])
        for rival in comps:
            comp_cards += google_news_rss(f"{rival} vs {c['name']}", region="Global", max_results=3)
    render_tiles(comp_cards, cols=3)
